// @ts-nocheck
import fs from "fs/promises";
import Post from "../models/postModel.js";
import User from "../models/userModel.js";
import { v2 as cloudinary } from "cloudinary";
import mongoose from "mongoose";

const createPost = async (req, res) => {
  try {
    const { text } = req.body;
    const postedBy = req.user?._id;

    if (!text) return res.status(400).json({ error: "Text field is required" });
    if (!postedBy || !mongoose.Types.ObjectId.isValid(postedBy)) {
      return res.status(400).json({ error: "Invalid user ID" });
    }

    let imgUrl = "";
    if (req.file) {
      try {
        const uploadRes = await cloudinary.uploader.upload(req.file.path, {
          folder: "posts",
        });
        imgUrl = uploadRes.secure_url;
        await fs.unlink(req.file.path);
      } catch (uploadErr) {
        console.error("Image upload failed:", uploadErr);
        return res.status(500).json({ error: "Image upload failed" });
      }
    }

    const newPost = await Post.create({ postedBy, text, img: imgUrl });
    res.status(201).json(newPost);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.message });
  }
};

const getPost = async (req, res) => {
	try {
		const post = await Post.findById(req.params.id);

		if (!post) {
			return res.status(404).json({ error: "Post not found" });
		}

		res.status(200).json(post);
	} catch (err) {
		res.status(500).json({ error: err.message });
	}
};

const deletePost = async (req, res) => {
	try {
		const post = await Post.findById(req.params.id);
		if (!post) {
			return res.status(404).json({ error: "Post not found" });
		}

		if (post.postedBy.toString() !== req.user._id.toString()) {
			return res.status(401).json({ error: "Unauthorized to delete post" });
		}

		if (post.img) {
			const imgId = post.img.split("/").pop().split(".")[0];
			await cloudinary.uploader.destroy(imgId);
		}

		await Post.findByIdAndDelete(req.params.id);

		res.status(200).json({ message: "Post deleted successfully" });
	} catch (err) {
		res.status(500).json({ error: err.message });
	}
};

const likeUnlikePost = async (req, res) => {
	try {
		const { id: postId } = req.params;
		const userId = req.user._id;

		const post = await Post.findById(postId);

		if (!post) {
			return res.status(404).json({ error: "Post not found" });
		}

		const userLikedPost = post.likes.includes(userId);

		if (userLikedPost) {
			// Unlike post
			await Post.updateOne({ _id: postId }, { $pull: { likes: userId } });
			res.status(200).json({ message: "Post unliked successfully" });
		} else {
			// Like post
			post.likes.push(userId);
			await post.save();
			res.status(200).json({ message: "Post liked successfully" });
		}
	} catch (err) {
		res.status(500).json({ error: err.message });
	}
};

const replyToPost = async (req, res) => {
	try {
		const { text } = req.body;
		const postId = req.params.id;
		const userId = req.user._id;
		const userProfilePic = req.user.profilePic;
		const username = req.user.username;

		if (!text) {
			return res.status(400).json({ error: "Text field is required" });
		}

		const post = await Post.findById(postId);
		if (!post) {
			return res.status(404).json({ error: "Post not found" });
		}

		const reply = { userId, text, userProfilePic, username };

		post.replies.push(reply);
		await post.save();

		res.status(200).json(reply);
	} catch (err) {
		res.status(500).json({ error: err.message });
	}
};

const getFeedPosts = async (req, res) => {
	try {
		const userId = req.user._id;
		const user = await User.findById(userId);
		if (!user) {
			return res.status(404).json({ error: "User not found" });
		}

		const following = user.following;

		const feedPosts = await Post.find({ postedBy: { $in: following } }).sort({ createdAt: -1 });

		res.status(200).json(feedPosts);
	} catch (err) {
		res.status(500).json({ error: err.message });
	}
};

const getUserPosts = async (req, res) => {
	try {
		const userId = req.user.id;
		
		const posts = await Post.find({ user: userId })
		  .sort({ createdAt: -1 })
		  .populate('user', 'username profilePic')
		  .populate('likes', 'username profilePic')
		  .populate('retweets', 'username profilePic');
	
		res.status(200).json({
		  status: 'success',
		  results: posts.length,
		  data: posts
		});
	  } catch (err) {
		res.status(400).json({
		  status: 'fail',
		  message: err.message
		});
	  }
  };
  


const updatePost = async (req, res) => {
  try {
    const { text, img } = req.body;
    const postId = req.params.id;
    const userId = req.user._id;

    if (!mongoose.Types.ObjectId.isValid(postId)) {
      return res.status(400).json({ error: "Invalid post ID" });
    }

    const post = await Post.findById(postId);
    if (!post) return res.status(404).json({ error: "Post not found" });

    if (post.postedBy.toString() !== userId.toString()) {
      return res.status(403).json({ error: "Unauthorized to update post" });
    }

    if (typeof text !== "undefined") {
      const maxLength = 500;
      if (text.length > maxLength) {
        return res.status(400).json({ error: `Text must be â‰¤ ${maxLength} characters` });
      }
      post.text = text;
    }

    if (typeof img !== "undefined") {
      if (post.img) {
        try {
          // Extract public ID with folder structure
          const urlParts = post.img.split('/');
          const publicIdWithFolder = urlParts.slice(urlParts.indexOf('posts')).join('/').split('.')[0];
          await cloudinary.uploader.destroy(publicIdWithFolder);
        } catch (cloudinaryErr) {
          console.error("Failed to delete old image:", cloudinaryErr);
        }
      }
      post.img = img ? img : undefined;
    }

    await post.save();
    res.status(200).json(post);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.message });
  }
};



export {
  createPost,
  getPost,
  deletePost,
  likeUnlikePost,
  replyToPost,
  getFeedPosts,
  getUserPosts,
  updatePost
};



// @ts-nocheck
import mongoose from "mongoose";

const postSchema = mongoose.Schema(
	{
		postedBy: {
			type: mongoose.Schema.Types.ObjectId,
			ref: "User",
			required: true,
		},
		text: {
			type: String,
			maxLength: 500,
		},
		img: {
			type: String,
		},
		likes: {
			// array of user ids
			type: [mongoose.Schema.Types.ObjectId],
			ref: "User",
			default: [],
		},
		replies: [
			{
				userId: {
					type: mongoose.Schema.Types.ObjectId,
					ref: "User",
					required: true,
				},
				text: {
					type: String,
					required: true,
				},
				userProfilePic: {
					type: String,
				},
				username: {
					type: String,
				},
			},
		],
	},
	{
		timestamps: true,
	}
);

const Post = mongoose.model("Post", postSchema);

export default Post;
